#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
# Get Environment details
- set_fact:
    dwx_endpoint_api: "{{ cdp_endpoint_url }}/dwx/api/v2"

- name: DEBUG - dwx_endpoint_api
  debug:
    msg: "{{ dwx_endpoint_api }}"

- name: Get Environment CRN
  uri:
    url: "{{ dwx_endpoint_api }}/environments"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: dwx_environments

- name: DEBUG - dwx_environments
  debug:
    msg: "{{ dwx_environments }}"
    
- set_fact:
    dwx_env_crn: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ warehouse.env_name }}' ].environmentCRN | [0]"

- name: DEBUG - dwx_env_crn
  debug:
    msg: "{{ dwx_env_crn }}"

- set_fact:
    dwx_env_id: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ warehouse.env_name }}' ].id | [0]"

- name: DEBUG - dwx_env_id
  debug:
    msg: "{{ dwx_env_id }}"

- set_fact:
    dwx_env_status: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ warehouse.env_name }}' ].status | [0]"

- name: DEBUG - dwx_env_status
  debug:
    msg: "{{ dwx_env_status }}"


# Activate env (that will trigger default Database Catalog to be created)
- name: Activate Environment and create Database Catalog
  uri:
    url: "{{ dwx_endpoint_api }}/environments?environmentCrn={{ dwx_env_crn }}"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', 'activate_env.json') }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
    timeout: 300
  register: answer_to_activate_env
  when: dwx_env_status != 'Running'

- name: Get new environment ID (once environment has been activated) 
  set_fact:
    dwx_env_id: "{{ answer_to_activate_env.json | community.general.json_query(query) }}"
  vars:
    query: "clusterId"
  when: dwx_env_status != 'Running'

- name: DEBUG - dwx_env_id
  debug:
    msg: "{{ dwx_env_id }}"
  when: dwx_env_status != 'Running'

#  Wait for Environment to be running
- name: Check Environment running
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: env_activation
  until: " env_activation.json.cluster.status == 'Running' "
  retries: 60
  delay: 5

# Check if Database Catalog is already set up
- name: Get Environments to check Database Catalog Creation
  uri:
    url: "{{ dwx_endpoint_api }}/environments"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: dwx_environments

- name: DEBUG - dwx_environments
  debug:
    msg: "{{ dwx_environments }}"
    
- set_fact:
    dwx_dbc_id: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ warehouse.env_name }}' ].clusterState.warehouses.[*] | [0] | [0] [?warehouse.displayName == '{{ warehouse.database_catalog_name }}' ] | [0].warehouse.id"

- name: DEBUG - dwx_dbc_id
  debug:
    msg: "{{ dwx_dbc_id }}"

- set_fact:
    dwx_dbc_is_existing: "{{ false if dwx_dbc_id == '' else true }}"

- name: DEBUG - dwx_dbc_is_existing
  debug:
    msg: "{{ dwx_dbc_is_existing }}"

# Create DBC if not already present 
- name: Create Database Catalog 
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/warehouses?start="
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: [200, 202]
    body_format: json
    body: "{{ lookup('template', 'create_dbc.json') }}"
    return_content: yes
    validate_certs: no
  register: create_dbc
  when: not dwx_dbc_is_existing

- name: DEBUG - create_dbc
  debug:
    msg: "{{ create_dbc }}"
  when: not dwx_dbc_is_existing

- name: Get Environments to get new Database Catalog ID
  uri:
    url: "{{ dwx_endpoint_api }}/environments"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: dwx_environments
  when: not dwx_dbc_is_existing

- name: DEBUG - dwx_environments
  debug:
    msg: "{{ dwx_environments }}"
  when: not dwx_dbc_is_existing
    
- set_fact:
    dwx_dbc_id: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ warehouse.env_name }}' ].clusterState.warehouses.[*] | [0] | [0] [?warehouse.displayName == '{{ warehouse.database_catalog_name }}' ] | [0].warehouse.id"
  when: not dwx_dbc_is_existing

- name: DEBUG - dwx_dbc_id
  debug:
    msg: "{{ dwx_dbc_id }}"
    
# TODO: Here you change deployment resources of DBC to lower it

- name: Pause 5 seconds to let the deployments to be created
  pause:
    seconds: 5
  when: pvc_eco_resources

- name: Lower Metastore Memory
  shell: '/bin/bash -i -c "kubectl-ecs -n warehouse-{{ warehouse.env_name }}-datalake-default set resources statefulsets -l app=metastore --requests memory=1G"'
  when: pvc_eco_resources

- name: Lower Metastore CPU
  shell: '/bin/bash -i -c "kubectl-ecs -n warehouse-{{ warehouse.env_name }}-datalake-default set resources statefulsets -l app=metastore --requests cpu=500m"'
  when: pvc_eco_resources

- name: Restart Metastore pods
  shell: '/bin/bash -i -c "kubectl-ecs -n warehouse-{{ warehouse.env_name }}-datalake-default delete pod -l app=metastore"'
  when: pvc_eco_resources

- name: Lower Hue Query Processor Memory
  shell: '/bin/bash -i -c "kubectl-ecs -n warehouse-{{ warehouse.env_name }}-datalake-default set resources statefulsets -l app=hue-query-processor --requests memory=1G"'
  when: pvc_eco_resources

- name: Lower Hue Query Processor CPU
  shell: '/bin/bash -i -c "kubectl-ecs -n warehouse-{{ warehouse.env_name }}-datalake-default set resources statefulsets -l app=hue-query-processor --requests cpu=250m"'
  when: pvc_eco_resources

- name: Restart Hue Query Processor pods
  shell: '/bin/bash -i -c "kubectl-ecs -n warehouse-{{ warehouse.env_name }}-datalake-default delete pod -l app=hue-query-processor"'
  when: pvc_eco_resources

# Wait for DBC to be running 
- name: Check Database Catalog Activation
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/warehouses/{{ dwx_dbc_id }}?render=true"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: dbc_activation
  until: " dbc_activation.json.Warehouse.warehouse.status == 'Running' "
  retries: 60
  delay: 5

# Create Hive VW:
- name: Create Hive Virtual Warehouse
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/llaps?start="
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', 'create_hive_vw.json') }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: answer_to_hive_activation
  when: warehouse.type == 'hive' | default(false)

# TODO: Here you change deployment resources of Hive VW to lower it

- name: Pause 10 seconds to let the deployments to be created
  pause:
    seconds: 10
  when: pvc_eco_resources

- name: Lower HS2 Memory
  shell: '/bin/bash -i -c "kubectl-ecs -n compute-{{ warehouse.name }} set resources statefulsets -l app=hiveserver2 --requests memory=1G"'
  when: pvc_eco_resources

- name: Lower HS2 CPU
  shell: '/bin/bash -i -c "kubectl-ecs -n compute-{{ warehouse.name }} set resources statefulsets -l app=hiveserver2 --requests cpu=500m"'
  when: pvc_eco_resources

- name: Restart HS2 pods
  shell: '/bin/bash -i -c "kubectl-ecs -n compute-{{ warehouse.name }} delete pod -l app=hiveserver2"'
  when: pvc_eco_resources

- name: Lower Hue Memory
  shell: '/bin/bash -i -c "kubectl-ecs -n compute-{{ warehouse.name }} set resources statefulsets -l app=huebackend --requests memory=1G"'
  when: pvc_eco_resources

- name: Lower Hue CPU
  shell: '/bin/bash -i -c "kubectl-ecs -n compute-{{ warehouse.name }} set resources statefulsets -l app=huebackend --requests cpu=250m"'
  when: pvc_eco_resources

- name: Restart Hue pods
  shell: '/bin/bash -i -c "kubectl-ecs -n compute-{{ warehouse.name }} delete pod -l app=huebackend"'
  when: pvc_eco_resources

- name: Lower Query Coordinator Memory
  shell: '/bin/bash -i -c "kubectl-ecs -n compute-{{ warehouse.name }} set resources statefulsets -l app=query-coordinator --requests memory=2G"'
  when: pvc_eco_resources

- name: Lower Query Coordinator CPU
  shell: '/bin/bash -i -c "kubectl-ecs -n compute-{{ warehouse.name }} set resources statefulsets -l app=query-coordinator --requests cpu=500m"'
  when: pvc_eco_resources

- name: Restart Query Coordinator pods
  shell: '/bin/bash -i -c "kubectl-ecs -n compute-{{ warehouse.name }} delete pod -l app=query-coordinator"'
  when: pvc_eco_resources

- name: Lower Query Executor Memory
  shell: '/bin/bash -i -c "kubectl-ecs -n compute-{{ warehouse.name }} set resources statefulsets -l app=query-executor-0 --requests memory=4G"'
  when: pvc_eco_resources

- name: Lower Query Executor CPU
  shell: '/bin/bash -i -c "kubectl-ecs -n compute-{{ warehouse.name }} set resources statefulsets -l app=query-executor-0 --requests cpu=1"'
  when: pvc_eco_resources

- name: Restart Query Executor pods
  shell: '/bin/bash -i -c "kubectl-ecs -n compute-{{ warehouse.name }} delete pod -l app=query-executor-0"'
  when: pvc_eco_resources



# Create Impala VW
- name: Create Impala Virtual Warehouse
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/impalas?start="
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', 'create_impala_vw.json') }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: answer_to_impala_activation
  when: warehouse.type == 'impala' | default(false)

# TODO: Here you change deployment resources of VW to lower it

- name: Pause 10 seconds to let the deployments to be created
  pause:
    seconds: 10
  when: pvc_eco_resources
  
- name: Lower Hue Memory
  shell: '/bin/bash -i -c "kubectl-ecs -n impala-{{ warehouse.name }} set resources statefulsets -l app=huebackend --requests memory=1G"'
  when: pvc_eco_resources

- name: Lower Hue CPU
  shell: '/bin/bash -i -c "kubectl-ecs -n impala-{{ warehouse.name }} set resources statefulsets -l app=huebackend --requests cpu=500m"'
  when: pvc_eco_resources

- name: Restart Hue pods
  shell: '/bin/bash -i -c "kubectl-ecs -n impala-{{ warehouse.name }} delete pod -l app=huebackend"'
  when: pvc_eco_resources

- name: Lower Executor Memory
  shell: '/bin/bash -i -c "kubectl-ecs -n impala-{{ warehouse.name }} set resources statefulsets -l app=impala-executor --requests memory=12G"'
  when: pvc_eco_resources

- name: Lower Executor CPU
  shell: '/bin/bash -i -c "kubectl-ecs -n impala-{{ warehouse.name }} set resources statefulsets -l app=impala-executor --requests cpu=1"'
  when: pvc_eco_resources

- name: Restart Executor pods
  shell: '/bin/bash -i -c "kubectl-ecs -n impala-{{ warehouse.name }} delete pod -l app=impala-executor"'
  when: pvc_eco_resources

- name: Lower Statestore Memory
  shell: '/bin/bash -i -c "kubectl-ecs -n impala-{{ warehouse.name }} set resources deployments -l app=statestored --requests memory=512M"'
  when: pvc_eco_resources

- name: Lower Statestore CPU
  shell: '/bin/bash -i -c "kubectl-ecs -n impala-{{ warehouse.name }} set resources deployments -l app=statestored --requests cpu=250m"'
  when: pvc_eco_resources

- name: Restart Statestore pods
  shell: '/bin/bash -i -c "kubectl-ecs -n impala-{{ warehouse.name }} delete pod -l app=impala-executor"'
  when: pvc_eco_resources

- name: Lower Auto Scaler Memory
  shell: '/bin/bash -i -c "kubectl-ecs -n impala-{{ warehouse.name }} set resources deployments -l app=impala-autoscaler --requests memory=512M"'
  when: pvc_eco_resources

- name: Lower Auto Scaler CPU
  shell: '/bin/bash -i -c "kubectl-ecs -n impala-{{ warehouse.name }} set resources deployments -l app=impala-autoscaler --requests cpu=250m"'
  when: pvc_eco_resources

- name: Restart Auto Scaler pods
  shell: '/bin/bash -i -c "kubectl-ecs -n impala-{{ warehouse.name }} delete pod -l app=impala-autoscaler"'
  when: pvc_eco_resources