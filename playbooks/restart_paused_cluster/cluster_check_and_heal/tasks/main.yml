# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
- name: DEBUG - cluster
  debug:
    msg: "{{ cluster }}"
  when: debug | default(false)

- name: Wait to have cluster status
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster.name }}"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: result
  until: result.json.entityStatus == "BAD_HEALTH" or result.json.entityStatus == "GOOD_HEALTH"
  retries: 60
  delay: 10

- set_fact:
    is_cluster_bad: "{{ true if result.json.entityStatus == 'BAD_HEALTH' else false }}"

- name: DEBUG - is_cluster_bad
  debug:
    msg: "{{ is_cluster_bad }}"
  when: debug | default(false)

- set_fact:
    is_pvc_cluster: "{{ true if result.json.clusterType == 'EXPERIENCE_CLUSTER' else false }}"

- name: DEBUG - is_pvc_cluster
  debug:
    msg: "{{ is_pvc_cluster }}"
  when: debug | default(false)


- name: Get All services
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster.name }}/services"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: cluster_services

- name: DEBUG - cluster_services
  debug:
    msg: "{{ cluster_services }}"
  when: debug | default(false)

# If it is a pvc cluster, unseal vault.
- set_fact:
    ecs_service_name: "{{ cluster_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'ECS'].name | [0]"
  when: is_pvc_cluster

- name: DEBUG - ecs_service_name
  debug:
    msg: "{{ ecs_service_name }}"
  when: is_pvc_cluster and debug | default(false)

- name: Unseal Vault of PvC Cluster
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster.name }}/services/{{ ecs_service_name }}/commands/VaultUnseal"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: result
  when: is_pvc_cluster

- name: Restart each service in error
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster.name }}/services/{{ service.name }}/commands/restart"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  with_items: "{{ cluster_services.json | community.general.json_query('items[]') }}"
  loop_control:
    loop_var: service
  when: service.healthSummary != "GOOD"


